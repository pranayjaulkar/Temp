" <?php

$user_agent = $_SERVER['HTTP_USER_AGENT'];

if (strpos($user_agent, 'MSIE') !== false) {

$browser = 'Internet Explorer';

} elseif (strpos($user_agent, 'Firefox') !== false) {

$browser = 'Mozilla Firefox';

} elseif (strpos($user_agent, 'Chrome') !== false) {

$browser = 'Google Chrome';

} elseif (strpos($user_agent, 'Safari') !== false) {

$browser = 'Apple Safari';

} elseif (strpos($user_agent, 'Opera') !== false) {

$browser = 'Opera';

} else {

$browser = 'Unknown';

}

echo "Your browser is: $browser";

?>








<?php
// Initialize an empty variable to store the user's message
$message = '';
// Check if the form has been submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
// Get the user's message from the form submission
$message = $_POST['message'];
// Filter out any HTML tags from the user's message
$message = strip_tags($message);
$message = htmlentities($message);
}
?>
<!-- Example form with POST method -->
<form method="POST">
<label for="message">Message:</label>
<textarea name="message" id="message" cols="30"
rows="10"><?php echo $message; ?></textarea>
<br>
<button type="submit">Submit</button>
</form>
<!-- Display the user's message after filtering out any HTML
tags -->
<p>User's message: <?php echo $message; ?></p>






<?php
//handling form data with custom array
// Initialize an empty array to store form data
$form_data = array();
// Check if the form has been submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
// Store form data in custom array
$form_data['name'] = $_POST['name'];
$form_data['email'] = $_POST['email'];
$form_data['message'] = $_POST['message'];
// Validate form data (e.g. check if name and email are not
empty)
if (empty($form_data['name'])) {
echo "Please enter your name";
}
if (empty($form_data['email'])) {
echo "Please enter your email";
}
// Process form data (e.g. send an email, save to database)
// ...
}
?>
<!-- Example form with POST method -->
<form method="POST">
<label for="name">Name:</label>
<input type="text" name="name" id="name">
<br>
<label for="email">Email:</label>
<input type="email" name="email" id="email">
<br>
<label for="message">Message:</label>
<textarea name="message" id="message" cols="30"
rows="10"></textarea>
<br>
<button type="submit">Submit</button>
</form>







<?php

// Initialize an empty array to store form data

$form_data = array();

// Check if the form has been submitted

if ($_SERVER['REQUEST_METHOD'] == 'POST') {

// Store form data in custom array

$form_data['name'] = $_POST['name'];

$form_data['email'] = $_POST['email'];

// Validate form data (e.g. check if name and email are not

empty)

if (empty($form_data['name'])) {

echo "Please enter your name";

}

if (empty($form_data['email'])) {

echo "Please enter your email";

}

// Process form data (e.g. send an email, save to database)

// ...

}

?>

<!-- Example form with POST method -->

<form method="POST">

<label for="name">Name:</label>

<input type="text" name="name" id="name" value="<?php echo

$form_data['name']; ?>">

<br>

<label for="email">Email:</label>

<input type="email" name="email" id="email" value="<?php echo

$form_data['email']; ?>">

<br>

<button type="submit">Submit</button>

</form>









<?php

print_r($_POST);

if ($_SERVER['REQUEST_METHOD'] == 'POST') {

// Get all form data

$form_data = $_POST;

// Display all form data

echo "<h2>Form Data:</h2>";

foreach ($form_data as $key => $value) {

echo "<strong>$key:</strong> $value <br>";

}

}

?>

<!-- Example form with POST method -->

<form method="POST">

<label for="name">Name:</label>

<input type="text" name="name" id="name">

<br>

<label for="email">Email:</label>

<input type="email" name="email" id="email">

<br>

<label for="message">Message:</label>

<textarea name="message" id="message" cols="30"

rows="10"></textarea>

<br>

<button type="submit">Submit</button>

</form>









<?php
class Person
{
public $name;
public $age;
public function __construct($name, $age)
{
$this->name = $name;
$this->age = $age;
}
private function privateMethod()
{
echo "I am a private method.";
}
protected function protectedMethod()
{
echo "I am a protected method.";
}
public function publicMethod()
{
echo "<font color=hotpink face = comic sans ms
size=7>hello my name is ".$this->name." i am ".$this->age .
"years old</font>";
}
}$person = new Person("Mimansa", 4);
// Access private and protected methods
// This will result in a fatal error since private methods can
only be accessed within the class itself
//$person->privateMethod();
// This will also result in a fatal error since protected
methods can only be accessed within the class itself or its
subclasses
//$person->protectedMethod();
// Access public method
$person->publicMethod();
?>











<?php

class Person

{

public $name;

public $age;

public function __construct($name, $age)

{

$this->name = $name;

$this->age = $age;

}

private function privateMethod()

{

echo "I am a private method.";

}

protected function protectedMethod()

{

echo "I am a protected method.";

}

public function publicMethod()

{echo "<font color=hotpink face = comic sans ms

size=7>hello my name is ".$this->name." i am ".$this->age .

"years old</font>";

}

}

// Create a new person object

$person = new Person("Mimansa", 4);

// Serialization

$serialized = serialize($person);

echo "Serialized data: " . $serialized . "<br>";

// Unserialization

$unserialized = unserialize($serialized);

echo "Unserialized data: " . $unserialized->name . " " .

$unserialized->age . "<br>";

// Access private and protected methods

// This will result in a fatal error since private methods can

only be accessed within the class itself

//$person->privateMethod();

// This will also result in a fatal error since protected

methods can only be accessed within the class itself or its

subclasses

//$person->protectedMethod();

// Access public method

$person->publicMethod();

?>








<?php

class Person

{

public $name;

public $age;

public function __construct($name, $age)

{

$this->name = $name;

$this->age = $age;

}

private function privateMethod()

{

echo "I am a private method.";

}

protected function protectedMethod()

{

echo "I am a protected method.";

}

public function publicMethod()

{

echo "<font color=hotpink face = comic sans ms

size=7>hello my name is ".$this->name." i am ".$this->age .

"years old</font>";

}

}$person = new Person("Mimansa", 4);

// Introspection

$class_properties = get_class_vars("Person");

$object_properties = get_object_vars($person);

$class_methods = get_class_methods("Person");

$object_class = get_class($person);

echo "Class properties: <br>";

print_r($class_properties);

echo "<br>";

echo "Object properties: <br>";

print_r($object_properties);

echo "<br>";

echo "Class methods: <br>";

print_r($class_methods);

echo "<br>";

echo "Object class: <br>";

print_r($object_class);

echo "<br>";

// Access private and protected methods

// This will result in a fatal error since private methods can

only be accessed within the class itself

//$person->privateMethod();

// This will also result in a fatal error since protected

methods can only be accessed within the class itself or its

subclasses

//$person->protectedMethod();

// Access public method

$person->publicMethod();

?>












